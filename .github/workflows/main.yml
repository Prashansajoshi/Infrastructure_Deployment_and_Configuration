name: Infrastructure Deployment and Configuration
on:
    workflow_dispatch:
    push:
      branches: [ "stage" ]
    pull_request:
      branches: [ "main" ] ########

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
    AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} 
    AWS_DEFAULT_REGION: us-east-1

jobs:
    terraform_infrastructure:

      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Echo Hello World
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Version
        run: echo "Terraform version=$(terraform --version)"

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform 

      # - name: Terraform Destroy
      #   run: terraform destroy
      #   working-directory: terraform

    setup_ansible:
        runs-on: ubuntu-latest
        needs: terraform_infrastructure  
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Checkout
          uses: actions/checkout@v4

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1
        # - name: Install ansible requirements
        #   run: pip3 install -r ansible/requirements.txt

        - uses: actions/setup-python@v4
          with:
            python-version: "pypy3.10"

        - name: Install boto 3
          run: |
            which python
            source /opt/pipx/venvs/ansible-core/bin/activate
            python3 -m pip install boto3
            python3 -m pip install botocore

        - name: Check ansible version
          run: |
            ansible --version

        - name: Wait
          run: |
            sleep 2

        - name: Install Tree
          run: sudo apt install tree -y

        - name: Tree
          run: tree -L 3

        - name: Ansible Inventory
          run: cd ansible && ansible-inventory -i aws_ec2.yml --graph 

        - name: Ansible Playbook
          run: |
            ansible-playbook ansible/configure.yml -i ansible/aws_ec2.yml -v

        - name: ansible graph
          run: |
            ansible all --list-hosts &&
            ansible-inventory -i aws_ec2.yaml --graph -vvv
          working-directory: ansible

        - name: Run Ansible Playbook
          run: ansible-playbook -i aws_ec2.yml configure.yml
          working-directory: ansible
          env:
            ANSIBLE_HOST_KEY_CHECKING: false
            

    build_application:
      runs-on: ubuntu-latest
      needs: setup_ansible
      steps:
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Git clone
        run: git clone https://github.com/SameepSig/Node_React_CRUD .

      - name: Creating frontend .env file
        run: |
          echo "VITE_API_URL=http://54.87.39.218:3000 " > frontend/.env

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm
        run: npm install -g npm@latest

      - name: Install frontend dependencies
        run: npm install
        working-directory: frontend

      - name: Install backend dependencies
        run: npm install
        working-directory: backend

      - name: Zip backend and db.sql
        run: zip -r backend_db.zip backend db.sql
        working-directory: /home/runner/work/Infrastructure_Deployment_and_Configuration/Infrastructure_Deployment_and_Configuration

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Ensure boto3 and botocore modules are installed
        run : pip3 install boto3 botocore

      - name: Upload frontend to S3 
        run: aws s3 cp dist s3://prashansa-s3-bucket/dist --recursive

      - name: send backend and db.sql to S3
        run: aws s3 cp backend_db.zip s3://prashansa-s3-bucket/backend_db.zip



    # upload_to_s3:
    #   runs-on: ubuntu-latest
    #   needs: build_application
    #   steps:

    #   - name: Configure AWS Credentials
    #     uses: aws-actions/configure-aws-credentials@v4
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    #       aws-region: us-east-1

    #   - name: Upload frontend to S3 
    #     run: aws s3 cp dist s3://prashansa-s3-bucket/dist --recursive

    #   - name: send backend and db.sql to S3
    #     run: aws s3 cp backend_db.zip s3://prashansa-s3-bucket/backend_db.zip




    download_build_app:
      runs-on: ubuntu-latest
      needs: build_application
      steps:
      - name: Ensure boto3 and botocore modules are installed
        run : pip3 install boto3 botocore
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: us-east-1
  
      - name: Install awscli
        uses: adexltd/aws-ssm-send-command@master
        id: install-awscli
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          instance-ids: ${{ secrets.INSTANCE_IDS}}

          command : |
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      

    upload_to_ec2:
      runs-on: ubuntu-latest
      needs: download_build_app
      steps:

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: AWS SSM Send-Command
        uses: adexltd/aws-ssm-send-command@master
        id: transfer-code
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          instance-ids: ${{ secrets.INSTANCE_ID }}

          working-directory: /home/ubuntu/
          command: |
            mkdir /var/www/html/dist
            aws s3 cp s3://sameep-cicd-artifacts-s3-bucket-test/dist/ /var/www/html/dist/ --recursive
            aws s3 cp s3://sameep-cicd-artifacts-s3-bucket-test/backend_with_db.zip /home/ubuntu/
            unzip /home/ubuntu/backend_with_db.zip

    # upload-to-s3:
    #     runs-on: ubuntu-latest
    #     needs: setup_ansible
          
    #     steps:
    #       - name: Checkout code 
    #         uses: actions/checkout@v3

    #       - name: Install AWS CLI
    #         run: |
    #           sudo apt-get update
    #           sudo apt install -y awscli  
      
    #       - name: Ensure S3 bucket is created
    #         run: |
    #           BUCKET_NAME="prashansa-s3-bucket"
    #           if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
    #             aws s3 rb s3://$BUCKET_NAME --force
    #           fi
    #           aws s3api create-bucket --bucket $BUCKET_NAME --region us-east-1    
            
    #       - name: Upload dist folder to S3
    #         run: aws s3 cp Node_project/frontend/dist s3://prashansa-s3-bucket/dist --recursive